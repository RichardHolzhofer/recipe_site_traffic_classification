name: CI CD pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pandas pytest python-dotenv scikit-learn pymongo

      - name: Lint with Ruff
        run: |
          ruff check . --fix
          ruff check .

      - name: Run unit tests
        run: |
          pytest tests/

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: ci
    runs-on: ubuntu-latest
    steps:
        - name: Checkout Code
          uses: actions/checkout@v3
        
        - name: Install Utilities
          run: |
            sudo apt-get update
            sudo apt-get install -y jq unzip

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
            IMAGE_TAG: latest

          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  continuous_deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    
    env:
      CONTAINER_NAME: recipe-site-traffic-classification
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
      AWS_ECR_LOGIN_URI: ${{ secrets.AWS_ECR_LOGIN_URI }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest image
        run: |
          docker pull $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest

      - name: Stop and remove container if running
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
            echo "Stopping and removing container $CONTAINER_NAME"
            docker stop $CONTAINER_NAME
            docker rm -fv $CONTAINER_NAME
          else
            echo "No existing container named $CONTAINER_NAME"
          fi

      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8000:8000 --ipc="host" --name=$CONTAINER_NAME \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_REGION=${{ secrets.AWS_REGION }} \
          -e MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }} \
          -e MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_TRACKING_USERNAME }} \
          -e MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_TRACKING_PASSWORD }} \
          -e MONGO_DB_URL=${{ secrets.MONGO_DB_URL }} \
          $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest
